
import { initBuffers } from "./init-buffers.js";
import { initShaderProgram } from "./shader.js";
import { vsOffscreenSource, fsOffscreenSource } from "./shaders.js";
function initOffscreenInfo(gl, gridSize)
{
    const firstTex = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, firstTex);

    const level = 0;
    const internalFormat = gl.RGBA;
    const width = gridSize;
    const height = gridSize;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    const pixel = null;
    gl.texImage2D(
	gl.TEXTURE_2D,
	level,
	internalFormat,
	width,
	height,
	border,
	srcFormat,
	srcType,
	pixel,
    );

    const secondTex = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, secondTex);
    gl.texImage2D(
	gl.TEXTURE_2D,
	level,
	internalFormat,
	width,
	height,
	border,
	srcFormat,
	srcType,
	pixel,
    );

    // Create and bind the framebuffer
    const firstFb = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, firstFb);
    
    // attach the texture as the first color attachment
    const attachmentPoint = gl.COLOR_ATTACHMENT0;
    gl.framebufferTexture2D(
	gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, firstTex, level);
    
    // Create and bind the framebuffer
    const secondFb = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, secondFb);
    
    // attach the texture as the first color attachment
    gl.framebufferTexture2D(
	gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, secondTex, level);


    let shaderProgram = initShaderProgram(gl, vsOffscreenSource, fsOffscreenSource);

    let programInfo = {
	attribLocations: {
	    vertexPosition: gl.getAttribLocation(shaderProgram,
						 "aVertexPosition"),
	    vertexUV: gl.getAttribLocation(shaderProgram,
					   "aVertexUV"),
	},
	uniformLocations: {
	    uSampler: gl.getUniformLocation(shaderProgram,
					    "uSampler"),
	    uTime: gl.getUniformLocation(shaderProgram,
					    "uTime"),
	},

    };

    
    let vertices = new Float32Array([
	-1,-1, 0, //pos
	0,0, //uv

	-1,1,0,
	0,1,

	1,1,0,
	1,1,

	1,-1,0,
	1,0]
				     );

    let vbuffers = initBuffers(gl, vertices, 5);

    const type = gl.FLOAT; // the data in the buffer is 32bit floats
    const stride = 5 * 4; // how many bytes to get from one set of values to the next
    // 0 = use type and numComponents above
    const offset = 0; // how many bytes inside the buffer to start from
    gl.bindBuffer(gl.ARRAY_BUFFER, vbuffers.vertices);
    gl.vertexAttribPointer(
	programInfo.attribLocations.vertexPosition,
	3,
	gl.FLOAT,
	false,
	stride,
	0,
    );
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);
    gl.vertexAttribPointer(
	programInfo.attribLocations.vertexUV,
	2,
	gl.FLOAT,
	false,
	stride,
	12,
    );
    
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexUV);
    

    return {vbuffers, shaderProgram, programInfo, firstFb, secondFb,
	    fbInUse: firstFb,
	    texInUse: firstTex,
	    firstTex, secondTex};

    
}

export {initOffscreenInfo};
